# -*- coding: utf-8 -*-
"""data_loader_functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ps9PRMd9cPott_W1I2I3Z_q0dLCEPqHX
"""

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd

# Define constants for special tokens
SOS_token = 0
EOS_token = 1

# Language class to handle vocabulary
class Language:
    def __init__(self, name):
        self.name = name
        self.word2index = {}
        self.word2count = {}
        self.index2word = {SOS_token: "", EOS_token: ""}
        self.n_words = 2  # Count SOS and EOS

    def addWord(self, word):
        for char in word:
            self.addChar(char)

    def addChar(self, char):
        if char not in self.word2index:
            self.word2index[char] = self.n_words
            self.word2count[char] = 1
            self.index2word[self.n_words] = char
            self.n_words += 1
        else:
            self.word2count[char] += 1

# Function to load and preprocess data
def load_data(language, data_type, directory_path="/kaggle/input/akshantar-data/aksharantar_sampled/"):
    path = f"{directory_path}/{language}/{language}_{data_type}.csv"
    df = pd.read_csv(path, header=None)
    pairs = df.values.tolist()
    return pairs
# Function to prepare language objects and data
def prepare_data(language, path):
    input_lang = Language('eng')
    output_lang = Language(language)
    pairs = load_data(language, "train", path)
    for pair in pairs:
        input_lang.addWord(pair[0])
        output_lang.addWord(pair[1])
    return input_lang, output_lang, pairs

# Function to get cell type for RNN
def get_cell(cell_type):
    if cell_type == "LSTM":
        return nn.LSTM
    elif cell_type == "GRU":
        return nn.GRU
    elif cell_type == "RNN":
        return nn.RNN
    else:
        raise ValueError("Invalid cell type")

# Function to get optimizer
def get_optimizer(optimizer):
    if optimizer == "Adam":
        return optim.Adam
    else:
        raise ValueError("Invalid optimizer")

