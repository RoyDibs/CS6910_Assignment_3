# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1irTWaUo_B4j8GIWnxAsI_jYp5c6ozQcf
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
from data_loader_functions import  get_cell

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Encoder class
class Encoder(nn.Module):
    def __init__(self, input_size, embed_size, hidden_size, cell_type, num_layers, dropout):
        super(Encoder, self).__init__()
        self.hidden_size = hidden_size
        self.embedding = nn.Embedding(input_size, embed_size)
        self.rnn = get_cell(cell_type)(input_size=embed_size, hidden_size=hidden_size, num_layers=num_layers, dropout=dropout)

    def forward(self, input, hidden):
        embedded = self.embedding(input).view(1, 1, -1)
        output, hidden = self.rnn(embedded, hidden)
        return output, hidden

    def initHidden(self):
        # Initialize hidden state with zeros
        num_layers = self.rnn.num_layers
        return torch.zeros(num_layers, 1, self.hidden_size, device=device)

# Decoder class
class Decoder(nn.Module):
    def __init__(self, output_size, embed_size, hidden_size, cell_type, num_layers, dropout):
        super(Decoder, self).__init__()
        self.hidden_size = hidden_size
        self.embedding = nn.Embedding(output_size, embed_size)
        self.rnn = get_cell(cell_type)(input_size=embed_size, hidden_size=hidden_size, num_layers=num_layers, dropout=dropout)
        self.out = nn.Linear(hidden_size, output_size)
        self.softmax = nn.LogSoftmax(dim=1)

    def forward(self, input, hidden):
        output = self.embedding(input).view(1, 1, -1)
        output = F.relu(output)
        output, hidden = self.rnn(output, hidden)
        output = self.softmax(self.out(output[0]))
        return output, hidden

    def initHidden(self):
        return torch.zeros(self.rnn.num_layers, 1, self.hidden_size, device=device)