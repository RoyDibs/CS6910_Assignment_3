# -*- coding: utf-8 -*-
"""data_loader_functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CsWn3KsssBGCtZzZbTNBX-tqUiB1JY2h
"""

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd

# Define constants for special tokens
SOS_token = 0
EOS_token = 1

class Language:
    def __init__(self, name):
        self.name = name
        self.char2index = {}
        self.char2count = {}
        self.index2char = {SOS_token: "<", EOS_token: ">"}
        self.n_chars = 2

    def add_char(self, char):
        if char not in self.char2index:
            self.char2index[char] = self.n_chars
            self.char2count[char] = 1
            self.index2char[self.n_chars] = char
            self.n_chars += 1
        else:
            self.char2count[char] += 1

# Function to load and preprocess data
def load_data(language, data_type, directory_path="/kaggle/input/akshantar-data/aksharantar_sampled/"):
    path = f"{directory_path}/{language}/{language}_{data_type}.csv"
    df = pd.read_csv(path, header=None)
    pairs = df.values.tolist()
    return pairs

def get_languages(lang: str, path):
    input_lang = Language('eng')
    output_lang = Language(lang)
    pairs = load_data(lang, "train", path)
    for pair in pairs:
        for char in pair[0]:
            input_lang.add_char(char)
        for char in pair[1]:
            output_lang.add_char(char)
    return input_lang, output_lang, pairs

def get_cell(cell_type: str):
    cells = {'LSTM': nn.LSTM, 'GRU': nn.GRU, 'RNN': nn.RNN}
    return cells[cell_type]

def get_optimizer(optimizer: str):
    optimizers = {'SGD': optim.SGD, 'ADAM': optim.Adam}
    return optimizers[optimizer]