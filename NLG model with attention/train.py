# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v2o7FQF-2QczA1fi_50xhBPDGnR9jjYC
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np

from train_single import train_single

# Set device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Define constants for special tokens
SOS_token = 0
EOS_token = 1

def train(model, iters=-1):
    plot_losses = []
    print_loss_total = 0
    plot_loss_total = 0
    random.shuffle(model.training_pairs)
    iters = len(model.training_pairs) if iters == -1 else iters
    for iter in range(1, iters):
        training_pair = model.training_pairs[iter - 1]
        input_tensor = training_pair[0]
        target_tensor = training_pair[1]
        loss = train_single(model, input_tensor, target_tensor)
        print_loss_total += loss
        plot_loss_total += loss
        if iter % model.PRINT_EVERY == 0:
            print_loss_avg = print_loss_total / model.PRINT_EVERY
            print_loss_total = 0
            print("Loss: {:.4f} | Iterations: {}".format(print_loss_avg, iter))
        if iter % model.PLOT_EVERY == 0:
            plot_loss_avg = plot_loss_total / model.PLOT_EVERY
            plot_losses.append(plot_loss_avg)
            plot_loss_total = 0
    return plot_losses